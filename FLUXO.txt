*** Fluxo de desenvolvimento do tfg ***

* Parte 1 (Fazendo o FAST funcionar no celular)
|-> Documentação JAVA para converter o projeto 
  |-> https://docs.opencv.org/master/javadoc/index.html
|-> Documentação do FAST em Python, para converter para Java
  |-> https://docs.opencv.org/3.4/df/d0c/tutorial_py_fast.html
  |-> O jeito que o opencv-java funciona é que você passa os objetos, e a maioria das funções retorna void
|-> OpenCV convertido para gradle
  |-> https://github.com/quickbirdstudios/opencv-android (graças a deus, usando 3.4.1 para não dar pau)
|-> Artigo base com o código da aplicação
  |-> https://heartbeat.fritz.ai/a-guide-to-preparing-opencv-for-android-4e9532677809

* Desenvolvimento Parte 1
|-> Instalar as libs
|-> Montar uma interface de teste
|-> Pegar uma imagem .jpeg de carro de corrida
|-> Converter ela para grayscale
|-> Usar o FAST para detectar seus cantos
|-> Converter de grayscale para RGB de novo para mostrar os quadradinhos em cor
|-> Fazer uma função que desenha os circulos em cima da Mat (matriz de resultado), mandar os pontos detectados pelo FAST
|-> Criado classe helper Colors que pega cores aleatórias pra ficar bonitinho
|-> Converter a matriz de resultado para um bitmap
|-> Botar na tela

* Parte 2 (Pegando da câmera e analizando pelo FAST uma imagem)
|-> Pegar da câmera adaptado desse cara 
  |-> https://stackoverflow.com/questions/6448856/android-camera-intent-how-to-get-full-sized-photo
|-> Habilitar External Storage
  |-> https://pt.stackoverflow.com/questions/187119/erro-fileuriexposedexception-no-android-n
|-> Arrumar os filepaths
  |-> https://stackoverflow.com/questions/40498380/java-lang-illegalargumentexception-failed-to-find-configured-root-that-contains

* Desenvolvimento
|-> Pegar o build.gradle e subir a minima versão do SDK para suportar as coisas da camera (15 -> 23)
|-> Adicionar métodos helpers de acionar a câmera e retornar
|-> A câmera comumente retorna um thumbnail, tem que configurar de pegar a imagem inteira, pra isso se usa External_Storage
|-> Fazer as modificações necessárias para pedir o external storage
|-> Refazer um pouco do layout
|-> A câmera coloca a imagem no imageView, depois eu pego a imagem do imageView, converto em Mat, processo e retorno

* Parte 3

* Desenvolvimento
|-> Implementação do FFMPEG para acesso a stream da câmera de video
|-> Interface entre o FFMPEG e o Java muito lenta

* Parte 4
|-> Módulo que cria um câmera view e me dá acesso aos frames
  |-> https://physicistdeveloper.wordpress.com/2018/04/08/use-opencv-camera-activity-in-android/

* Desenvolvimento
|-> O Frame que vem do OpenCV já é um Mat, só rotaciono ele e aplico o FAST automaticamente a cada frame.
|-> Modificado layout para novo modo de teste, para ligar e desligar o Fast
|-> Performance fast ligado e desligado em algumas áreas varia de 30fps para 15fps
  |-> Provavelmente pode ocorrer porque cada ponto é desenhado em cima do frame, custoso, e o frame segura a renderização do próximo
  |-> Talvez colocar esse fluxo multithread